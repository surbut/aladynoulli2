Input Notebook:  template_notebook.ipynb
Output Notebook: results/output_chunk_0.ipynb
Passed unknown parameter: start_idx
Passed unknown parameter: output_path
Input notebook does not contain a cell with tag 'parameters'
Executing:   0%|          | 0/7 [00:00<?, ?cell/s]Executing notebook with kernel: python3
Executing:  14%|█▍        | 1/7 [00:00<00:03,  1.59cell/s]Executing:  29%|██▊       | 2/7 [00:08<00:23,  4.79s/cell]Executing:  43%|████▎     | 3/7 [00:08<00:11,  2.80s/cell]Executing:  43%|████▎     | 3/7 [00:09<00:12,  3.23s/cell]

Aborted!
Task exception was never retrieved
future: <Task finished name='Task-12' coro=<NotebookClient.async_execute_cell() done, defined at /opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/nbclient/client.py:920> exception=CellExecutionError('An error occurred while executing the following cell:\n------------------\n\ntorch.manual_seed(42)\nnp.random.seed(42)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(42)\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\n# Initialize model with subsetted data\n\npsi_config = {\'in_cluster\': 1, \'out_cluster\': -2, \'noise_in\': 0.1, \'noise_out\': 0.01}\nmodel = AladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest(\n    N=Y_100k.shape[0],\n    D=Y_100k.shape[1],\n    T=Y_100k.shape[2],\n    K=essentials[\'K\'],\n    P=essentials[\'P\'],\n    G=G_100k,\n    Y=Y_100k,\n    prevalence_t=essentials[\'prevalence_t\']\n)\n\nmodel.initialize_params(psi_config=psi_config)\nmodel.plot_initial_params()\nmodel.visualize_initialization()\nmodel.psi\n\nhistory = model.fit(E_100k, num_epochs=10, learning_rate=1e-4, lambda_reg=1e-2)\n        \n\n------------------\n\n----- stdout -----\nLambda kernel condition number: 56314924.00\nPhi kernel condition number: 59684776.00\n----- stderr -----\n/Users/sarahurbut/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  self.G = torch.tensor(G, dtype=torch.float32)\n/Users/sarahurbut/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  self.Y = torch.tensor(Y, dtype=torch.float32)\n------------------\n\n\x1b[0;31m---------------------------------------------------------------------------\x1b[0m\n\x1b[0;31mKeyboardInterrupt\x1b[0m                         Traceback (most recent call last)\nCell \x1b[0;32mIn[3], line 10\x1b[0m\n\x1b[1;32m      7\x1b[0m \x1b[38;5;66;03m# Initialize model with subsetted data\x1b[39;00m\n\x1b[1;32m      9\x1b[0m psi_config \x1b[38;5;241m=\x1b[39m {\x1b[38;5;124m\'\x1b[39m\x1b[38;5;124min_cluster\x1b[39m\x1b[38;5;124m\'\x1b[39m: \x1b[38;5;241m1\x1b[39m, \x1b[38;5;124m\'\x1b[39m\x1b[38;5;124mout_cluster\x1b[39m\x1b[38;5;124m\'\x1b[39m: \x1b[38;5;241m-\x1b[39m\x1b[38;5;241m2\x1b[39m, \x1b[38;5;124m\'\x1b[39m\x1b[38;5;124mnoise_in\x1b[39m\x1b[38;5;124m\'\x1b[39m: \x1b[38;5;241m0.1\x1b[39m, \x1b[38;5;124m\'\x1b[39m\x1b[38;5;124mnoise_out\x1b[39m\x1b[38;5;124m\'\x1b[39m: \x1b[38;5;241m0.01\x1b[39m}\n\x1b[0;32m---> 10\x1b[0m model \x1b[38;5;241m=\x1b[39m \x1b[43mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m     11\x1b[0m \x1b[43m    \x1b[49m\x1b[43mN\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mY_100k\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mshape\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;241;43m0\x1b[39;49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     12\x1b[0m \x1b[43m    \x1b[49m\x1b[43mD\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mY_100k\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mshape\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;241;43m1\x1b[39;49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     13\x1b[0m \x1b[43m    \x1b[49m\x1b[43mT\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mY_100k\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mshape\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;241;43m2\x1b[39;49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     14\x1b[0m \x1b[43m    \x1b[49m\x1b[43mK\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43messentials\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[38;5;124;43mK\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     15\x1b[0m \x1b[43m    \x1b[49m\x1b[43mP\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43messentials\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[38;5;124;43mP\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     16\x1b[0m \x1b[43m    \x1b[49m\x1b[43mG\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mG_100k\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     17\x1b[0m \x1b[43m    \x1b[49m\x1b[43mY\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mY_100k\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     18\x1b[0m \x1b[43m    \x1b[49m\x1b[43mprevalence_t\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43messentials\x1b[49m\x1b[43m[\x1b[49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[38;5;124;43mprevalence_t\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[43m]\x1b[49m\n\x1b[1;32m     19\x1b[0m \x1b[43m)\x1b[49m\n\x1b[1;32m     21\x1b[0m model\x1b[38;5;241m.\x1b[39minitialize_params(psi_config\x1b[38;5;241m=\x1b[39mpsi_config)\n\x1b[1;32m     22\x1b[0m model\x1b[38;5;241m.\x1b[39mplot_initial_params()\n\nFile \x1b[0;32m~/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:47\x1b[0m, in \x1b[0;36mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest.__init__\x1b[0;34m(self, N, D, T, K, P, G, Y, prevalence_t, disease_names)\x1b[0m\n\x1b[1;32m     45\x1b[0m \x1b[38;5;66;03m# Initialize parameters\x1b[39;00m\n\x1b[1;32m     46\x1b[0m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mupdate_kernels()\n\x1b[0;32m---> 47\x1b[0m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43minitialize_params\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\n\nFile \x1b[0;32m~/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:75\x1b[0m, in \x1b[0;36mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest.initialize_params\x1b[0;34m(self, psi_config, true_psi, **kwargs)\x1b[0m\n\x1b[1;32m     72\x1b[0m Y_corr \x1b[38;5;241m=\x1b[39m torch\x1b[38;5;241m.\x1b[39mcorrcoef(Y_avg\x1b[38;5;241m.\x1b[39mT)\n\x1b[1;32m     73\x1b[0m similarity \x1b[38;5;241m=\x1b[39m (Y_corr \x1b[38;5;241m+\x1b[39m \x1b[38;5;241m1\x1b[39m) \x1b[38;5;241m/\x1b[39m \x1b[38;5;241m2\x1b[39m\n\x1b[0;32m---> 75\x1b[0m spectral \x1b[38;5;241m=\x1b[39m \x1b[43mSpectralClustering\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m     76\x1b[0m \x1b[43m    \x1b[49m\x1b[43mn_clusters\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mK\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m     77\x1b[0m \x1b[43m    \x1b[49m\x1b[43massign_labels\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[38;5;124;43mkmeans\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[43m,\x1b[49m\n\x1b[1;32m     78\x1b[0m \x1b[43m    \x1b[49m\x1b[43maffinity\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[38;5;124;43mprecomputed\x1b[39;49m\x1b[38;5;124;43m\'\x1b[39;49m\x1b[43m,\x1b[49m\n\x1b[1;32m     79\x1b[0m \x1b[43m    \x1b[49m\x1b[43mn_init\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;241;43m10\x1b[39;49m\x1b[43m,\x1b[49m\n\x1b[1;32m     80\x1b[0m \x1b[43m    \x1b[49m\x1b[43mrandom_state\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;241;43m42\x1b[39;49m\n\x1b[1;32m     81\x1b[0m \x1b[43m\x1b[49m\x1b[43m)\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mfit\x1b[49m\x1b[43m(\x1b[49m\x1b[43msimilarity\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mnumpy\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m     83\x1b[0m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mclusters \x1b[38;5;241m=\x1b[39m spectral\x1b[38;5;241m.\x1b[39mlabels_\n\x1b[1;32m     85\x1b[0m \x1b[38;5;66;03m# Initialize psi with cluster deviations\x1b[39;00m\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/base.py:1389\x1b[0m, in \x1b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\x1b[0;34m(estimator, *args, **kwargs)\x1b[0m\n\x1b[1;32m   1382\x1b[0m     estimator\x1b[38;5;241m.\x1b[39m_validate_params()\n\x1b[1;32m   1384\x1b[0m \x1b[38;5;28;01mwith\x1b[39;00m config_context(\n\x1b[1;32m   1385\x1b[0m     skip_parameter_validation\x1b[38;5;241m=\x1b[39m(\n\x1b[1;32m   1386\x1b[0m         prefer_skip_nested_validation \x1b[38;5;129;01mor\x1b[39;00m global_skip_validation\n\x1b[1;32m   1387\x1b[0m     )\n\x1b[1;32m   1388\x1b[0m ):\n\x1b[0;32m-> 1389\x1b[0m     \x1b[38;5;28;01mreturn\x1b[39;00m \x1b[43mfit_method\x1b[49m\x1b[43m(\x1b[49m\x1b[43mestimator\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43margs\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43mkwargs\x1b[49m\x1b[43m)\x1b[49m\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_spectral.py:757\x1b[0m, in \x1b[0;36mSpectralClustering.fit\x1b[0;34m(self, X, y)\x1b[0m\n\x1b[1;32m    754\x1b[0m     \x1b[38;5;28mprint\x1b[39m(\x1b[38;5;124mf\x1b[39m\x1b[38;5;124m"\x1b[39m\x1b[38;5;124mComputing label assignment using \x1b[39m\x1b[38;5;132;01m{\x1b[39;00m\x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39massign_labels\x1b[38;5;132;01m}\x1b[39;00m\x1b[38;5;124m"\x1b[39m)\n\x1b[1;32m    756\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39massign_labels \x1b[38;5;241m==\x1b[39m \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mkmeans\x1b[39m\x1b[38;5;124m"\x1b[39m:\n\x1b[0;32m--> 757\x1b[0m     _, \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mlabels_, _ \x1b[38;5;241m=\x1b[39m \x1b[43mk_means\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m    758\x1b[0m \x1b[43m        \x1b[49m\x1b[43mmaps\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    759\x1b[0m \x1b[43m        \x1b[49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mn_clusters\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    760\x1b[0m \x1b[43m        \x1b[49m\x1b[43mrandom_state\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mrandom_state\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    761\x1b[0m \x1b[43m        \x1b[49m\x1b[43mn_init\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mn_init\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    762\x1b[0m \x1b[43m        \x1b[49m\x1b[43mverbose\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mverbose\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    763\x1b[0m \x1b[43m    \x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    764\x1b[0m \x1b[38;5;28;01melif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39massign_labels \x1b[38;5;241m==\x1b[39m \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mcluster_qr\x1b[39m\x1b[38;5;124m"\x1b[39m:\n\x1b[1;32m    765\x1b[0m     \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mlabels_ \x1b[38;5;241m=\x1b[39m cluster_qr(maps)\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_param_validation.py:189\x1b[0m, in \x1b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\x1b[0;34m(*args, **kwargs)\x1b[0m\n\x1b[1;32m    187\x1b[0m global_skip_validation \x1b[38;5;241m=\x1b[39m get_config()[\x1b[38;5;124m"\x1b[39m\x1b[38;5;124mskip_parameter_validation\x1b[39m\x1b[38;5;124m"\x1b[39m]\n\x1b[1;32m    188\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m global_skip_validation:\n\x1b[0;32m--> 189\x1b[0m     \x1b[38;5;28;01mreturn\x1b[39;00m \x1b[43mfunc\x1b[49m\x1b[43m(\x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43margs\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43mkwargs\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    191\x1b[0m func_sig \x1b[38;5;241m=\x1b[39m signature(func)\n\x1b[1;32m    193\x1b[0m \x1b[38;5;66;03m# Map *args/**kwargs to the function signature\x1b[39;00m\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:439\x1b[0m, in \x1b[0;36mk_means\x1b[0;34m(X, n_clusters, sample_weight, init, n_init, max_iter, verbose, tol, random_state, copy_x, algorithm, return_n_iter)\x1b[0m\n\x1b[1;32m    290\x1b[0m \x1b[38;5;129m@validate_params\x1b[39m(\n\x1b[1;32m    291\x1b[0m     {\n\x1b[1;32m    292\x1b[0m         \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mX\x1b[39m\x1b[38;5;124m"\x1b[39m: [\x1b[38;5;124m"\x1b[39m\x1b[38;5;124marray-like\x1b[39m\x1b[38;5;124m"\x1b[39m, \x1b[38;5;124m"\x1b[39m\x1b[38;5;124msparse matrix\x1b[39m\x1b[38;5;124m"\x1b[39m],\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m    311\x1b[0m     return_n_iter\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mFalse\x1b[39;00m,\n\x1b[1;32m    312\x1b[0m ):\n\x1b[1;32m    313\x1b[0m \x1b[38;5;250m    \x1b[39m\x1b[38;5;124;03m"""Perform K-means clustering algorithm.\x1b[39;00m\n\x1b[1;32m    314\x1b[0m \n\x1b[1;32m    315\x1b[0m \x1b[38;5;124;03m    Read more in the :ref:`User Guide <k_means>`.\x1b[39;00m\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m    437\x1b[0m \x1b[38;5;124;03m    16.0\x1b[39;00m\n\x1b[1;32m    438\x1b[0m \x1b[38;5;124;03m    """\x1b[39;00m\n\x1b[0;32m--> 439\x1b[0m     est \x1b[38;5;241m=\x1b[39m \x1b[43mKMeans\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m    440\x1b[0m \x1b[43m        \x1b[49m\x1b[43mn_clusters\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mn_clusters\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    441\x1b[0m \x1b[43m        \x1b[49m\x1b[43minit\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43minit\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    442\x1b[0m \x1b[43m        \x1b[49m\x1b[43mn_init\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mn_init\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    443\x1b[0m \x1b[43m        \x1b[49m\x1b[43mmax_iter\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mmax_iter\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    444\x1b[0m \x1b[43m        \x1b[49m\x1b[43mverbose\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mverbose\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    445\x1b[0m \x1b[43m        \x1b[49m\x1b[43mtol\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mtol\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    446\x1b[0m \x1b[43m        \x1b[49m\x1b[43mrandom_state\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mrandom_state\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    447\x1b[0m \x1b[43m        \x1b[49m\x1b[43mcopy_x\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mcopy_x\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    448\x1b[0m \x1b[43m        \x1b[49m\x1b[43malgorithm\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43malgorithm\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m    449\x1b[0m \x1b[43m    \x1b[49m\x1b[43m)\x1b[49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43mfit\x1b[49m\x1b[43m(\x1b[49m\x1b[43mX\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43msample_weight\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43msample_weight\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    450\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m return_n_iter:\n\x1b[1;32m    451\x1b[0m         \x1b[38;5;28;01mreturn\x1b[39;00m est\x1b[38;5;241m.\x1b[39mcluster_centers_, est\x1b[38;5;241m.\x1b[39mlabels_, est\x1b[38;5;241m.\x1b[39minertia_, est\x1b[38;5;241m.\x1b[39mn_iter_\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/base.py:1389\x1b[0m, in \x1b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\x1b[0;34m(estimator, *args, **kwargs)\x1b[0m\n\x1b[1;32m   1382\x1b[0m     estimator\x1b[38;5;241m.\x1b[39m_validate_params()\n\x1b[1;32m   1384\x1b[0m \x1b[38;5;28;01mwith\x1b[39;00m config_context(\n\x1b[1;32m   1385\x1b[0m     skip_parameter_validation\x1b[38;5;241m=\x1b[39m(\n\x1b[1;32m   1386\x1b[0m         prefer_skip_nested_validation \x1b[38;5;129;01mor\x1b[39;00m global_skip_validation\n\x1b[1;32m   1387\x1b[0m     )\n\x1b[1;32m   1388\x1b[0m ):\n\x1b[0;32m-> 1389\x1b[0m     \x1b[38;5;28;01mreturn\x1b[39;00m \x1b[43mfit_method\x1b[49m\x1b[43m(\x1b[49m\x1b[43mestimator\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43margs\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43mkwargs\x1b[49m\x1b[43m)\x1b[49m\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1491\x1b[0m, in \x1b[0;36mKMeans.fit\x1b[0;34m(self, X, y, sample_weight)\x1b[0m\n\x1b[1;32m   1487\x1b[0m best_inertia, best_labels \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;01mNone\x1b[39;00m, \x1b[38;5;28;01mNone\x1b[39;00m\n\x1b[1;32m   1489\x1b[0m \x1b[38;5;28;01mfor\x1b[39;00m i \x1b[38;5;129;01min\x1b[39;00m \x1b[38;5;28mrange\x1b[39m(\x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39m_n_init):\n\x1b[1;32m   1490\x1b[0m     \x1b[38;5;66;03m# Initialize centers\x1b[39;00m\n\x1b[0;32m-> 1491\x1b[0m     centers_init \x1b[38;5;241m=\x1b[39m \x1b[38;5;28;43mself\x1b[39;49m\x1b[38;5;241;43m.\x1b[39;49m\x1b[43m_init_centroids\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m   1492\x1b[0m \x1b[43m        \x1b[49m\x1b[43mX\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1493\x1b[0m \x1b[43m        \x1b[49m\x1b[43mx_squared_norms\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mx_squared_norms\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1494\x1b[0m \x1b[43m        \x1b[49m\x1b[43minit\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43minit\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1495\x1b[0m \x1b[43m        \x1b[49m\x1b[43mrandom_state\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mrandom_state\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1496\x1b[0m \x1b[43m        \x1b[49m\x1b[43msample_weight\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43msample_weight\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1497\x1b[0m \x1b[43m    \x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m   1498\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28mself\x1b[39m\x1b[38;5;241m.\x1b[39mverbose:\n\x1b[1;32m   1499\x1b[0m         \x1b[38;5;28mprint\x1b[39m(\x1b[38;5;124m"\x1b[39m\x1b[38;5;124mInitialization complete\x1b[39m\x1b[38;5;124m"\x1b[39m)\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1014\x1b[0m, in \x1b[0;36m_BaseKMeans._init_centroids\x1b[0;34m(self, X, x_squared_norms, init, random_state, sample_weight, init_size, n_centroids)\x1b[0m\n\x1b[1;32m   1011\x1b[0m     sample_weight \x1b[38;5;241m=\x1b[39m sample_weight[init_indices]\n\x1b[1;32m   1013\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;28misinstance\x1b[39m(init, \x1b[38;5;28mstr\x1b[39m) \x1b[38;5;129;01mand\x1b[39;00m init \x1b[38;5;241m==\x1b[39m \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mk-means++\x1b[39m\x1b[38;5;124m"\x1b[39m:\n\x1b[0;32m-> 1014\x1b[0m     centers, _ \x1b[38;5;241m=\x1b[39m \x1b[43m_kmeans_plusplus\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m   1015\x1b[0m \x1b[43m        \x1b[49m\x1b[43mX\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1016\x1b[0m \x1b[43m        \x1b[49m\x1b[43mn_clusters\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1017\x1b[0m \x1b[43m        \x1b[49m\x1b[43mrandom_state\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mrandom_state\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1018\x1b[0m \x1b[43m        \x1b[49m\x1b[43mx_squared_norms\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mx_squared_norms\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1019\x1b[0m \x1b[43m        \x1b[49m\x1b[43msample_weight\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43msample_weight\x1b[49m\x1b[43m,\x1b[49m\n\x1b[1;32m   1020\x1b[0m \x1b[43m    \x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m   1021\x1b[0m \x1b[38;5;28;01melif\x1b[39;00m \x1b[38;5;28misinstance\x1b[39m(init, \x1b[38;5;28mstr\x1b[39m) \x1b[38;5;129;01mand\x1b[39;00m init \x1b[38;5;241m==\x1b[39m \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mrandom\x1b[39m\x1b[38;5;124m"\x1b[39m:\n\x1b[1;32m   1022\x1b[0m     seeds \x1b[38;5;241m=\x1b[39m random_state\x1b[38;5;241m.\x1b[39mchoice(\n\x1b[1;32m   1023\x1b[0m         n_samples,\n\x1b[1;32m   1024\x1b[0m         size\x1b[38;5;241m=\x1b[39mn_clusters,\n\x1b[1;32m   1025\x1b[0m         replace\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mFalse\x1b[39;00m,\n\x1b[1;32m   1026\x1b[0m         p\x1b[38;5;241m=\x1b[39msample_weight \x1b[38;5;241m/\x1b[39m sample_weight\x1b[38;5;241m.\x1b[39msum(),\n\x1b[1;32m   1027\x1b[0m     )\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:251\x1b[0m, in \x1b[0;36m_kmeans_plusplus\x1b[0;34m(X, n_clusters, x_squared_norms, sample_weight, random_state, n_local_trials)\x1b[0m\n\x1b[1;32m    248\x1b[0m np\x1b[38;5;241m.\x1b[39mclip(candidate_ids, \x1b[38;5;28;01mNone\x1b[39;00m, closest_dist_sq\x1b[38;5;241m.\x1b[39msize \x1b[38;5;241m-\x1b[39m \x1b[38;5;241m1\x1b[39m, out\x1b[38;5;241m=\x1b[39mcandidate_ids)\n\x1b[1;32m    250\x1b[0m \x1b[38;5;66;03m# Compute distances to center candidates\x1b[39;00m\n\x1b[0;32m--> 251\x1b[0m distance_to_candidates \x1b[38;5;241m=\x1b[39m \x1b[43m_euclidean_distances\x1b[49m\x1b[43m(\x1b[49m\n\x1b[1;32m    252\x1b[0m \x1b[43m    \x1b[49m\x1b[43mX\x1b[49m\x1b[43m[\x1b[49m\x1b[43mcandidate_ids\x1b[49m\x1b[43m]\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43mX\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43mY_norm_squared\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[43mx_squared_norms\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43msquared\x1b[49m\x1b[38;5;241;43m=\x1b[39;49m\x1b[38;5;28;43;01mTrue\x1b[39;49;00m\n\x1b[1;32m    253\x1b[0m \x1b[43m\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    255\x1b[0m \x1b[38;5;66;03m# update closest distances squared and potential for each candidate\x1b[39;00m\n\x1b[1;32m    256\x1b[0m np\x1b[38;5;241m.\x1b[39mminimum(closest_dist_sq, distance_to_candidates, out\x1b[38;5;241m=\x1b[39mdistance_to_candidates)\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/metrics/pairwise.py:400\x1b[0m, in \x1b[0;36m_euclidean_distances\x1b[0;34m(X, Y, X_norm_squared, Y_norm_squared, squared)\x1b[0m\n\x1b[1;32m    391\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21m_euclidean_distances\x1b[39m(X, Y, X_norm_squared\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mNone\x1b[39;00m, Y_norm_squared\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mNone\x1b[39;00m, squared\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mFalse\x1b[39;00m):\n\x1b[1;32m    392\x1b[0m \x1b[38;5;250m    \x1b[39m\x1b[38;5;124;03m"""Computational part of euclidean_distances\x1b[39;00m\n\x1b[1;32m    393\x1b[0m \n\x1b[1;32m    394\x1b[0m \x1b[38;5;124;03m    Assumes inputs are already checked.\x1b[39;00m\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m    398\x1b[0m \x1b[38;5;124;03m    TODO: use a float64 accumulator in row_norms to avoid the latter.\x1b[39;00m\n\x1b[1;32m    399\x1b[0m \x1b[38;5;124;03m    """\x1b[39;00m\n\x1b[0;32m--> 400\x1b[0m     xp, _, device_ \x1b[38;5;241m=\x1b[39m \x1b[43mget_namespace_and_device\x1b[49m\x1b[43m(\x1b[49m\x1b[43mX\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[43mY\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    401\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m X_norm_squared \x1b[38;5;129;01mis\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m \x1b[38;5;28;01mNone\x1b[39;00m \x1b[38;5;129;01mand\x1b[39;00m X_norm_squared\x1b[38;5;241m.\x1b[39mdtype \x1b[38;5;241m!=\x1b[39m xp\x1b[38;5;241m.\x1b[39mfloat32:\n\x1b[1;32m    402\x1b[0m         XX \x1b[38;5;241m=\x1b[39m xp\x1b[38;5;241m.\x1b[39mreshape(X_norm_squared, (\x1b[38;5;241m-\x1b[39m\x1b[38;5;241m1\x1b[39m, \x1b[38;5;241m1\x1b[39m))\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_array_api.py:613\x1b[0m, in \x1b[0;36mget_namespace_and_device\x1b[0;34m(remove_none, remove_types, *array_list)\x1b[0m\n\x1b[1;32m    605\x1b[0m array_list \x1b[38;5;241m=\x1b[39m _remove_non_arrays(\n\x1b[1;32m    606\x1b[0m     \x1b[38;5;241m*\x1b[39marray_list,\n\x1b[1;32m    607\x1b[0m     remove_none\x1b[38;5;241m=\x1b[39mremove_none,\n\x1b[1;32m    608\x1b[0m     remove_types\x1b[38;5;241m=\x1b[39mremove_types,\n\x1b[1;32m    609\x1b[0m )\n\x1b[1;32m    611\x1b[0m skip_remove_kwargs \x1b[38;5;241m=\x1b[39m \x1b[38;5;28mdict\x1b[39m(remove_none\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mFalse\x1b[39;00m, remove_types\x1b[38;5;241m=\x1b[39m[])\n\x1b[0;32m--> 613\x1b[0m xp, is_array_api \x1b[38;5;241m=\x1b[39m \x1b[43mget_namespace\x1b[49m\x1b[43m(\x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43marray_list\x1b[49m\x1b[43m,\x1b[49m\x1b[43m \x1b[49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[38;5;241;43m*\x1b[39;49m\x1b[43mskip_remove_kwargs\x1b[49m\x1b[43m)\x1b[49m\n\x1b[1;32m    614\x1b[0m arrays_device \x1b[38;5;241m=\x1b[39m device(\x1b[38;5;241m*\x1b[39marray_list, \x1b[38;5;241m*\x1b[39m\x1b[38;5;241m*\x1b[39mskip_remove_kwargs)\n\x1b[1;32m    615\x1b[0m \x1b[38;5;28;01mif\x1b[39;00m is_array_api:\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_array_api.py:545\x1b[0m, in \x1b[0;36mget_namespace\x1b[0;34m(remove_none, remove_types, xp, *arrays)\x1b[0m\n\x1b[1;32m    490\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21mget_namespace\x1b[39m(\x1b[38;5;241m*\x1b[39marrays, remove_none\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mTrue\x1b[39;00m, remove_types\x1b[38;5;241m=\x1b[39m(\x1b[38;5;28mstr\x1b[39m,), xp\x1b[38;5;241m=\x1b[39m\x1b[38;5;28;01mNone\x1b[39;00m):\n\x1b[1;32m    491\x1b[0m \x1b[38;5;250m    \x1b[39m\x1b[38;5;124;03m"""Get namespace of arrays.\x1b[39;00m\n\x1b[1;32m    492\x1b[0m \n\x1b[1;32m    493\x1b[0m \x1b[38;5;124;03m    Introspect `arrays` arguments and return their common Array API compatible\x1b[39;00m\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m    543\x1b[0m \x1b[38;5;124;03m        Always False when array_api_dispatch=False.\x1b[39;00m\n\x1b[1;32m    544\x1b[0m \x1b[38;5;124;03m    """\x1b[39;00m\n\x1b[0;32m--> 545\x1b[0m     array_api_dispatch \x1b[38;5;241m=\x1b[39m \x1b[43mget_config\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m[\x1b[38;5;124m"\x1b[39m\x1b[38;5;124marray_api_dispatch\x1b[39m\x1b[38;5;124m"\x1b[39m]\n\x1b[1;32m    546\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m array_api_dispatch:\n\x1b[1;32m    547\x1b[0m         \x1b[38;5;28;01mif\x1b[39;00m xp \x1b[38;5;129;01mis\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m \x1b[38;5;28;01mNone\x1b[39;00m:\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/_config.py:57\x1b[0m, in \x1b[0;36mget_config\x1b[0;34m()\x1b[0m\n\x1b[1;32m     36\x1b[0m \x1b[38;5;250m\x1b[39m\x1b[38;5;124;03m"""Retrieve current values for configuration set by :func:`set_config`.\x1b[39;00m\n\x1b[1;32m     37\x1b[0m \n\x1b[1;32m     38\x1b[0m \x1b[38;5;124;03mReturns\x1b[39;00m\n\x1b[0;32m   (...)\x1b[0m\n\x1b[1;32m     53\x1b[0m \x1b[38;5;124;03mdict_keys([...])\x1b[39;00m\n\x1b[1;32m     54\x1b[0m \x1b[38;5;124;03m"""\x1b[39;00m\n\x1b[1;32m     55\x1b[0m \x1b[38;5;66;03m# Return a copy of the threadlocal configuration so that users will\x1b[39;00m\n\x1b[1;32m     56\x1b[0m \x1b[38;5;66;03m# not be able to modify the configuration with the returned dict.\x1b[39;00m\n\x1b[0;32m---> 57\x1b[0m \x1b[38;5;28;01mreturn\x1b[39;00m \x1b[43m_get_threadlocal_config\x1b[49m\x1b[43m(\x1b[49m\x1b[43m)\x1b[49m\x1b[38;5;241m.\x1b[39mcopy()\n\nFile \x1b[0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/_config.py:30\x1b[0m, in \x1b[0;36m_get_threadlocal_config\x1b[0;34m()\x1b[0m\n\x1b[1;32m     27\x1b[0m \x1b[38;5;28;01mdef\x1b[39;00m \x1b[38;5;21m_get_threadlocal_config\x1b[39m():\n\x1b[1;32m     28\x1b[0m \x1b[38;5;250m    \x1b[39m\x1b[38;5;124;03m"""Get a threadlocal **mutable** configuration. If the configuration\x1b[39;00m\n\x1b[1;32m     29\x1b[0m \x1b[38;5;124;03m    does not exist, copy the default global configuration."""\x1b[39;00m\n\x1b[0;32m---> 30\x1b[0m     \x1b[38;5;28;01mif\x1b[39;00m \x1b[38;5;129;01mnot\x1b[39;00m \x1b[38;5;28;43mhasattr\x1b[39;49m(_threadlocal, \x1b[38;5;124m"\x1b[39m\x1b[38;5;124mglobal_config\x1b[39m\x1b[38;5;124m"\x1b[39m):\n\x1b[1;32m     31\x1b[0m         _threadlocal\x1b[38;5;241m.\x1b[39mglobal_config \x1b[38;5;241m=\x1b[39m _global_config\x1b[38;5;241m.\x1b[39mcopy()\n\x1b[1;32m     32\x1b[0m     \x1b[38;5;28;01mreturn\x1b[39;00m _threadlocal\x1b[38;5;241m.\x1b[39mglobal_config\n\n\x1b[0;31mKeyboardInterrupt\x1b[0m: \n')>
Traceback (most recent call last):
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/nbclient/client.py", line 606, in setup_kernel
    yield
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/papermill/clientwrap.py", line 45, in execute
    self.papermill_execute_cells()
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/papermill/clientwrap.py", line 72, in papermill_execute_cells
    self.execute_cell(cell, index)
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/asyncio/base_events.py", line 634, in run_until_complete
    self.run_forever()
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/asyncio/base_events.py", line 601, in run_forever
    self._run_once()
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/asyncio/base_events.py", line 1869, in _run_once
    event_list = self._selector.select(timeout)
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/selectors.py", line 562, in select
    kev_list = self._selector.control(None, max_ev, timeout)
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

torch.manual_seed(42)
np.random.seed(42)
if torch.cuda.is_available():
    torch.cuda.manual_seed(42)
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False
# Initialize model with subsetted data

psi_config = {'in_cluster': 1, 'out_cluster': -2, 'noise_in': 0.1, 'noise_out': 0.01}
model = AladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest(
    N=Y_100k.shape[0],
    D=Y_100k.shape[1],
    T=Y_100k.shape[2],
    K=essentials['K'],
    P=essentials['P'],
    G=G_100k,
    Y=Y_100k,
    prevalence_t=essentials['prevalence_t']
)

model.initialize_params(psi_config=psi_config)
model.plot_initial_params()
model.visualize_initialization()
model.psi

history = model.fit(E_100k, num_epochs=10, learning_rate=1e-4, lambda_reg=1e-2)
        

------------------

----- stdout -----
Lambda kernel condition number: 56314924.00
Phi kernel condition number: 59684776.00
----- stderr -----
/Users/sarahurbut/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.G = torch.tensor(G, dtype=torch.float32)
/Users/sarahurbut/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.Y = torch.tensor(Y, dtype=torch.float32)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyboardInterrupt[0m                         Traceback (most recent call last)
Cell [0;32mIn[3], line 10[0m
[1;32m      7[0m [38;5;66;03m# Initialize model with subsetted data[39;00m
[1;32m      9[0m psi_config [38;5;241m=[39m {[38;5;124m'[39m[38;5;124min_cluster[39m[38;5;124m'[39m: [38;5;241m1[39m, [38;5;124m'[39m[38;5;124mout_cluster[39m[38;5;124m'[39m: [38;5;241m-[39m[38;5;241m2[39m, [38;5;124m'[39m[38;5;124mnoise_in[39m[38;5;124m'[39m: [38;5;241m0.1[39m, [38;5;124m'[39m[38;5;124mnoise_out[39m[38;5;124m'[39m: [38;5;241m0.01[39m}
[0;32m---> 10[0m model [38;5;241m=[39m [43mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest[49m[43m([49m
[1;32m     11[0m [43m    [49m[43mN[49m[38;5;241;43m=[39;49m[43mY_100k[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m
[1;32m     12[0m [43m    [49m[43mD[49m[38;5;241;43m=[39;49m[43mY_100k[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m1[39;49m[43m][49m[43m,[49m
[1;32m     13[0m [43m    [49m[43mT[49m[38;5;241;43m=[39;49m[43mY_100k[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m2[39;49m[43m][49m[43m,[49m
[1;32m     14[0m [43m    [49m[43mK[49m[38;5;241;43m=[39;49m[43messentials[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mK[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m
[1;32m     15[0m [43m    [49m[43mP[49m[38;5;241;43m=[39;49m[43messentials[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mP[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m
[1;32m     16[0m [43m    [49m[43mG[49m[38;5;241;43m=[39;49m[43mG_100k[49m[43m,[49m
[1;32m     17[0m [43m    [49m[43mY[49m[38;5;241;43m=[39;49m[43mY_100k[49m[43m,[49m
[1;32m     18[0m [43m    [49m[43mprevalence_t[49m[38;5;241;43m=[39;49m[43messentials[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mprevalence_t[39;49m[38;5;124;43m'[39;49m[43m][49m
[1;32m     19[0m [43m)[49m
[1;32m     21[0m model[38;5;241m.[39minitialize_params(psi_config[38;5;241m=[39mpsi_config)
[1;32m     22[0m model[38;5;241m.[39mplot_initial_params()

File [0;32m~/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:47[0m, in [0;36mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest.__init__[0;34m(self, N, D, T, K, P, G, Y, prevalence_t, disease_names)[0m
[1;32m     45[0m [38;5;66;03m# Initialize parameters[39;00m
[1;32m     46[0m [38;5;28mself[39m[38;5;241m.[39mupdate_kernels()
[0;32m---> 47[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43minitialize_params[49m[43m([49m[43m)[49m

File [0;32m~/aladynoulli/pyScripts/cluster_g_logit_init_acceptpsi.py:75[0m, in [0;36mAladynSurvivalFixedKernelsAvgLoss_clust_logitInit_psitest.initialize_params[0;34m(self, psi_config, true_psi, **kwargs)[0m
[1;32m     72[0m Y_corr [38;5;241m=[39m torch[38;5;241m.[39mcorrcoef(Y_avg[38;5;241m.[39mT)
[1;32m     73[0m similarity [38;5;241m=[39m (Y_corr [38;5;241m+[39m [38;5;241m1[39m) [38;5;241m/[39m [38;5;241m2[39m
[0;32m---> 75[0m spectral [38;5;241m=[39m [43mSpectralClustering[49m[43m([49m
[1;32m     76[0m [43m    [49m[43mn_clusters[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mK[49m[43m,[49m
[1;32m     77[0m [43m    [49m[43massign_labels[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mkmeans[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     78[0m [43m    [49m[43maffinity[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mprecomputed[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     79[0m [43m    [49m[43mn_init[49m[38;5;241;43m=[39;49m[38;5;241;43m10[39;49m[43m,[49m
[1;32m     80[0m [43m    [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[38;5;241;43m42[39;49m
[1;32m     81[0m [43m[49m[43m)[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43msimilarity[49m[38;5;241;43m.[39;49m[43mnumpy[49m[43m([49m[43m)[49m[43m)[49m
[1;32m     83[0m [38;5;28mself[39m[38;5;241m.[39mclusters [38;5;241m=[39m spectral[38;5;241m.[39mlabels_
[1;32m     85[0m [38;5;66;03m# Initialize psi with cluster deviations[39;00m

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/base.py:1389[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[0;34m(estimator, *args, **kwargs)[0m
[1;32m   1382[0m     estimator[38;5;241m.[39m_validate_params()
[1;32m   1384[0m [38;5;28;01mwith[39;00m config_context(
[1;32m   1385[0m     skip_parameter_validation[38;5;241m=[39m(
[1;32m   1386[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m   1387[0m     )
[1;32m   1388[0m ):
[0;32m-> 1389[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_spectral.py:757[0m, in [0;36mSpectralClustering.fit[0;34m(self, X, y)[0m
[1;32m    754[0m     [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mComputing label assignment using [39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39massign_labels[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m    756[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39massign_labels [38;5;241m==[39m [38;5;124m"[39m[38;5;124mkmeans[39m[38;5;124m"[39m:
[0;32m--> 757[0m     _, [38;5;28mself[39m[38;5;241m.[39mlabels_, _ [38;5;241m=[39m [43mk_means[49m[43m([49m
[1;32m    758[0m [43m        [49m[43mmaps[49m[43m,[49m
[1;32m    759[0m [43m        [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mn_clusters[49m[43m,[49m
[1;32m    760[0m [43m        [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[43mrandom_state[49m[43m,[49m
[1;32m    761[0m [43m        [49m[43mn_init[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mn_init[49m[43m,[49m
[1;32m    762[0m [43m        [49m[43mverbose[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mverbose[49m[43m,[49m
[1;32m    763[0m [43m    [49m[43m)[49m
[1;32m    764[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39massign_labels [38;5;241m==[39m [38;5;124m"[39m[38;5;124mcluster_qr[39m[38;5;124m"[39m:
[1;32m    765[0m     [38;5;28mself[39m[38;5;241m.[39mlabels_ [38;5;241m=[39m cluster_qr(maps)

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_param_validation.py:189[0m, in [0;36mvalidate_params.<locals>.decorator.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m    187[0m global_skip_validation [38;5;241m=[39m get_config()[[38;5;124m"[39m[38;5;124mskip_parameter_validation[39m[38;5;124m"[39m]
[1;32m    188[0m [38;5;28;01mif[39;00m global_skip_validation:
[0;32m--> 189[0m     [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    191[0m func_sig [38;5;241m=[39m signature(func)
[1;32m    193[0m [38;5;66;03m# Map *args/**kwargs to the function signature[39;00m

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:439[0m, in [0;36mk_means[0;34m(X, n_clusters, sample_weight, init, n_init, max_iter, verbose, tol, random_state, copy_x, algorithm, return_n_iter)[0m
[1;32m    290[0m [38;5;129m@validate_params[39m(
[1;32m    291[0m     {
[1;32m    292[0m         [38;5;124m"[39m[38;5;124mX[39m[38;5;124m"[39m: [[38;5;124m"[39m[38;5;124marray-like[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124msparse matrix[39m[38;5;124m"[39m],
[0;32m   (...)[0m
[1;32m    311[0m     return_n_iter[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[1;32m    312[0m ):
[1;32m    313[0m [38;5;250m    [39m[38;5;124;03m"""Perform K-means clustering algorithm.[39;00m
[1;32m    314[0m 
[1;32m    315[0m [38;5;124;03m    Read more in the :ref:`User Guide <k_means>`.[39;00m
[0;32m   (...)[0m
[1;32m    437[0m [38;5;124;03m    16.0[39;00m
[1;32m    438[0m [38;5;124;03m    """[39;00m
[0;32m--> 439[0m     est [38;5;241m=[39m [43mKMeans[49m[43m([49m
[1;32m    440[0m [43m        [49m[43mn_clusters[49m[38;5;241;43m=[39;49m[43mn_clusters[49m[43m,[49m
[1;32m    441[0m [43m        [49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m
[1;32m    442[0m [43m        [49m[43mn_init[49m[38;5;241;43m=[39;49m[43mn_init[49m[43m,[49m
[1;32m    443[0m [43m        [49m[43mmax_iter[49m[38;5;241;43m=[39;49m[43mmax_iter[49m[43m,[49m
[1;32m    444[0m [43m        [49m[43mverbose[49m[38;5;241;43m=[39;49m[43mverbose[49m[43m,[49m
[1;32m    445[0m [43m        [49m[43mtol[49m[38;5;241;43m=[39;49m[43mtol[49m[43m,[49m
[1;32m    446[0m [43m        [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[43mrandom_state[49m[43m,[49m
[1;32m    447[0m [43m        [49m[43mcopy_x[49m[38;5;241;43m=[39;49m[43mcopy_x[49m[43m,[49m
[1;32m    448[0m [43m        [49m[43malgorithm[49m[38;5;241;43m=[39;49m[43malgorithm[49m[43m,[49m
[1;32m    449[0m [43m    [49m[43m)[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43msample_weight[49m[38;5;241;43m=[39;49m[43msample_weight[49m[43m)[49m
[1;32m    450[0m     [38;5;28;01mif[39;00m return_n_iter:
[1;32m    451[0m         [38;5;28;01mreturn[39;00m est[38;5;241m.[39mcluster_centers_, est[38;5;241m.[39mlabels_, est[38;5;241m.[39minertia_, est[38;5;241m.[39mn_iter_

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/base.py:1389[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[0;34m(estimator, *args, **kwargs)[0m
[1;32m   1382[0m     estimator[38;5;241m.[39m_validate_params()
[1;32m   1384[0m [38;5;28;01mwith[39;00m config_context(
[1;32m   1385[0m     skip_parameter_validation[38;5;241m=[39m(
[1;32m   1386[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m   1387[0m     )
[1;32m   1388[0m ):
[0;32m-> 1389[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1491[0m, in [0;36mKMeans.fit[0;34m(self, X, y, sample_weight)[0m
[1;32m   1487[0m best_inertia, best_labels [38;5;241m=[39m [38;5;28;01mNone[39;00m, [38;5;28;01mNone[39;00m
[1;32m   1489[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mself[39m[38;5;241m.[39m_n_init):
[1;32m   1490[0m     [38;5;66;03m# Initialize centers[39;00m
[0;32m-> 1491[0m     centers_init [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_init_centroids[49m[43m([49m
[1;32m   1492[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m   1493[0m [43m        [49m[43mx_squared_norms[49m[38;5;241;43m=[39;49m[43mx_squared_norms[49m[43m,[49m
[1;32m   1494[0m [43m        [49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m
[1;32m   1495[0m [43m        [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[43mrandom_state[49m[43m,[49m
[1;32m   1496[0m [43m        [49m[43msample_weight[49m[38;5;241;43m=[39;49m[43msample_weight[49m[43m,[49m
[1;32m   1497[0m [43m    [49m[43m)[49m
[1;32m   1498[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mverbose:
[1;32m   1499[0m         [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mInitialization complete[39m[38;5;124m"[39m)

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1014[0m, in [0;36m_BaseKMeans._init_centroids[0;34m(self, X, x_squared_norms, init, random_state, sample_weight, init_size, n_centroids)[0m
[1;32m   1011[0m     sample_weight [38;5;241m=[39m sample_weight[init_indices]
[1;32m   1013[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(init, [38;5;28mstr[39m) [38;5;129;01mand[39;00m init [38;5;241m==[39m [38;5;124m"[39m[38;5;124mk-means++[39m[38;5;124m"[39m:
[0;32m-> 1014[0m     centers, _ [38;5;241m=[39m [43m_kmeans_plusplus[49m[43m([49m
[1;32m   1015[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m   1016[0m [43m        [49m[43mn_clusters[49m[43m,[49m
[1;32m   1017[0m [43m        [49m[43mrandom_state[49m[38;5;241;43m=[39;49m[43mrandom_state[49m[43m,[49m
[1;32m   1018[0m [43m        [49m[43mx_squared_norms[49m[38;5;241;43m=[39;49m[43mx_squared_norms[49m[43m,[49m
[1;32m   1019[0m [43m        [49m[43msample_weight[49m[38;5;241;43m=[39;49m[43msample_weight[49m[43m,[49m
[1;32m   1020[0m [43m    [49m[43m)[49m
[1;32m   1021[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(init, [38;5;28mstr[39m) [38;5;129;01mand[39;00m init [38;5;241m==[39m [38;5;124m"[39m[38;5;124mrandom[39m[38;5;124m"[39m:
[1;32m   1022[0m     seeds [38;5;241m=[39m random_state[38;5;241m.[39mchoice(
[1;32m   1023[0m         n_samples,
[1;32m   1024[0m         size[38;5;241m=[39mn_clusters,
[1;32m   1025[0m         replace[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[1;32m   1026[0m         p[38;5;241m=[39msample_weight [38;5;241m/[39m sample_weight[38;5;241m.[39msum(),
[1;32m   1027[0m     )

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:251[0m, in [0;36m_kmeans_plusplus[0;34m(X, n_clusters, x_squared_norms, sample_weight, random_state, n_local_trials)[0m
[1;32m    248[0m np[38;5;241m.[39mclip(candidate_ids, [38;5;28;01mNone[39;00m, closest_dist_sq[38;5;241m.[39msize [38;5;241m-[39m [38;5;241m1[39m, out[38;5;241m=[39mcandidate_ids)
[1;32m    250[0m [38;5;66;03m# Compute distances to center candidates[39;00m
[0;32m--> 251[0m distance_to_candidates [38;5;241m=[39m [43m_euclidean_distances[49m[43m([49m
[1;32m    252[0m [43m    [49m[43mX[49m[43m[[49m[43mcandidate_ids[49m[43m][49m[43m,[49m[43m [49m[43mX[49m[43m,[49m[43m [49m[43mY_norm_squared[49m[38;5;241;43m=[39;49m[43mx_squared_norms[49m[43m,[49m[43m [49m[43msquared[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m
[1;32m    253[0m [43m[49m[43m)[49m
[1;32m    255[0m [38;5;66;03m# update closest distances squared and potential for each candidate[39;00m
[1;32m    256[0m np[38;5;241m.[39mminimum(closest_dist_sq, distance_to_candidates, out[38;5;241m=[39mdistance_to_candidates)

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/metrics/pairwise.py:400[0m, in [0;36m_euclidean_distances[0;34m(X, Y, X_norm_squared, Y_norm_squared, squared)[0m
[1;32m    391[0m [38;5;28;01mdef[39;00m [38;5;21m_euclidean_distances[39m(X, Y, X_norm_squared[38;5;241m=[39m[38;5;28;01mNone[39;00m, Y_norm_squared[38;5;241m=[39m[38;5;28;01mNone[39;00m, squared[38;5;241m=[39m[38;5;28;01mFalse[39;00m):
[1;32m    392[0m [38;5;250m    [39m[38;5;124;03m"""Computational part of euclidean_distances[39;00m
[1;32m    393[0m 
[1;32m    394[0m [38;5;124;03m    Assumes inputs are already checked.[39;00m
[0;32m   (...)[0m
[1;32m    398[0m [38;5;124;03m    TODO: use a float64 accumulator in row_norms to avoid the latter.[39;00m
[1;32m    399[0m [38;5;124;03m    """[39;00m
[0;32m--> 400[0m     xp, _, device_ [38;5;241m=[39m [43mget_namespace_and_device[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43mY[49m[43m)[49m
[1;32m    401[0m     [38;5;28;01mif[39;00m X_norm_squared [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m X_norm_squared[38;5;241m.[39mdtype [38;5;241m!=[39m xp[38;5;241m.[39mfloat32:
[1;32m    402[0m         XX [38;5;241m=[39m xp[38;5;241m.[39mreshape(X_norm_squared, ([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m))

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_array_api.py:613[0m, in [0;36mget_namespace_and_device[0;34m(remove_none, remove_types, *array_list)[0m
[1;32m    605[0m array_list [38;5;241m=[39m _remove_non_arrays(
[1;32m    606[0m     [38;5;241m*[39marray_list,
[1;32m    607[0m     remove_none[38;5;241m=[39mremove_none,
[1;32m    608[0m     remove_types[38;5;241m=[39mremove_types,
[1;32m    609[0m )
[1;32m    611[0m skip_remove_kwargs [38;5;241m=[39m [38;5;28mdict[39m(remove_none[38;5;241m=[39m[38;5;28;01mFalse[39;00m, remove_types[38;5;241m=[39m[])
[0;32m--> 613[0m xp, is_array_api [38;5;241m=[39m [43mget_namespace[49m[43m([49m[38;5;241;43m*[39;49m[43marray_list[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mskip_remove_kwargs[49m[43m)[49m
[1;32m    614[0m arrays_device [38;5;241m=[39m device([38;5;241m*[39marray_list, [38;5;241m*[39m[38;5;241m*[39mskip_remove_kwargs)
[1;32m    615[0m [38;5;28;01mif[39;00m is_array_api:

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/utils/_array_api.py:545[0m, in [0;36mget_namespace[0;34m(remove_none, remove_types, xp, *arrays)[0m
[1;32m    490[0m [38;5;28;01mdef[39;00m [38;5;21mget_namespace[39m([38;5;241m*[39marrays, remove_none[38;5;241m=[39m[38;5;28;01mTrue[39;00m, remove_types[38;5;241m=[39m([38;5;28mstr[39m,), xp[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    491[0m [38;5;250m    [39m[38;5;124;03m"""Get namespace of arrays.[39;00m
[1;32m    492[0m 
[1;32m    493[0m [38;5;124;03m    Introspect `arrays` arguments and return their common Array API compatible[39;00m
[0;32m   (...)[0m
[1;32m    543[0m [38;5;124;03m        Always False when array_api_dispatch=False.[39;00m
[1;32m    544[0m [38;5;124;03m    """[39;00m
[0;32m--> 545[0m     array_api_dispatch [38;5;241m=[39m [43mget_config[49m[43m([49m[43m)[49m[[38;5;124m"[39m[38;5;124marray_api_dispatch[39m[38;5;124m"[39m]
[1;32m    546[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m array_api_dispatch:
[1;32m    547[0m         [38;5;28;01mif[39;00m xp [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/_config.py:57[0m, in [0;36mget_config[0;34m()[0m
[1;32m     36[0m [38;5;250m[39m[38;5;124;03m"""Retrieve current values for configuration set by :func:`set_config`.[39;00m
[1;32m     37[0m 
[1;32m     38[0m [38;5;124;03mReturns[39;00m
[0;32m   (...)[0m
[1;32m     53[0m [38;5;124;03mdict_keys([...])[39;00m
[1;32m     54[0m [38;5;124;03m"""[39;00m
[1;32m     55[0m [38;5;66;03m# Return a copy of the threadlocal configuration so that users will[39;00m
[1;32m     56[0m [38;5;66;03m# not be able to modify the configuration with the returned dict.[39;00m
[0;32m---> 57[0m [38;5;28;01mreturn[39;00m [43m_get_threadlocal_config[49m[43m([49m[43m)[49m[38;5;241m.[39mcopy()

File [0;32m/opt/miniconda3/envs/new_env_pyro2/lib/python3.9/site-packages/sklearn/_config.py:30[0m, in [0;36m_get_threadlocal_config[0;34m()[0m
[1;32m     27[0m [38;5;28;01mdef[39;00m [38;5;21m_get_threadlocal_config[39m():
[1;32m     28[0m [38;5;250m    [39m[38;5;124;03m"""Get a threadlocal **mutable** configuration. If the configuration[39;00m
[1;32m     29[0m [38;5;124;03m    does not exist, copy the default global configuration."""[39;00m
[0;32m---> 30[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28;43mhasattr[39;49m(_threadlocal, [38;5;124m"[39m[38;5;124mglobal_config[39m[38;5;124m"[39m):
[1;32m     31[0m         _threadlocal[38;5;241m.[39mglobal_config [38;5;241m=[39m _global_config[38;5;241m.[39mcopy()
[1;32m     32[0m     [38;5;28;01mreturn[39;00m _threadlocal[38;5;241m.[39mglobal_config

[0;31mKeyboardInterrupt[0m: 

