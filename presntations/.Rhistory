coord_flip()
cp=grid.arrange(p1, p2, p3, ncol = 3, heights = c(2, 2, 2))
# Combine plots with adjusted heights
#combined_plot <- p1 / p2 / p3 +
#plot_layout(heights = c(2, 2, 2))
return(cp)
}
prs_names=names(G)
individual_id=846
a=analyze_individual_trajectory(individual_id = individual_id,Y,G,theta,disease_names,prs_names,age_range = 30:80)
ggsave(a, filename = "individual_trajectory_earlyCAD.pdf", width = 8, height = 20,dpi=600)
analyze_individual_trajectory <- function(individual_id, Y, G, theta, disease_names_list, prs_names_list, age_range=30:80) {
# Get first occurrence of each disease for ordering
disease_timeline <- data.frame(
disease = disease_names_list,
first_occurrence = apply(Y[individual_id,,], 1, function(x) min(which(x == 1)))
) %>%
mutate(
first_occurrence = ifelse(is.infinite(first_occurrence), Inf, first_occurrence + 30),
ever_occurs = first_occurrence < Inf
)
# Get diseases that occur for this person
person_disease <- disease_timeline %>%
filter(ever_occurs) %>%
arrange(first_occurrence) %>%
pull(disease)
disease_indices <- match(person_disease, disease_names_list)
# 1. Topic trajectories
topics_df <- as.data.frame(t(theta_pred[individual_id,,])) %>%
setNames(paste0("Topic ", 0:9)) %>%
mutate(Age = age_range) %>%
pivot_longer(-Age,
names_to = "Topic",
values_to = "Weight")
p1 <- ggplot(topics_df, aes(x = Age, y = Weight, color = Topic)) +
geom_line(size = 1) +
labs(title = "Topic Trajectories",
y = "Topic Weight") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_d3()
# 2. Disease events - now ordered by first occurrence
diseases_df <- as.data.frame(t(Y[individual_id, disease_indices, ])) %>%
setNames(person_disease) %>%
mutate(Age = age_range) %>%
pivot_longer(-Age,
names_to = "Disease",
values_to = "Status") %>%
mutate(Disease = factor(Disease, levels = rev(person_disease)))  # Reverse order for bottom-up timeline
p2 <- ggplot(diseases_df, aes(x = Age, y = Disease, fill = as.factor(Status))) +
geom_tile() +
labs(title = "Disease Events",
y = "Disease Status",fill="Status") +
theme_minimal() +scale_fill_manual(values = c("0" = "white", "1" = "red"))+
theme(legend.position = "right")
# 3. Improved genetic risk scores plot
genetic_df <- data.frame(t(
G[individual_id,]
));
genetic_df$PRS=rownames(genetic_df)
colnames(genetic_df)=c("Value","PRS")
genetic_df=genetic_df%>%mutate(
Category = case_when(
abs(Value) >= 2 ~ "Very High",
abs(Value) >= 1 ~ "High",
abs(Value) >= 0.5 ~ "Moderate",
TRUE ~ "Low"
),
Direction = ifelse(Value >= 0, "Positive", "Negative"))
p3 <- ggplot(genetic_df, aes(x = reorder(PRS, abs(Value)), y = Value)) +
geom_col(aes(fill = Direction)) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = c(-2, -1, 1, 2), linetype = "dotted", alpha = 0.3) +
scale_fill_manual(values = c("Negative" = "darkred", "Positive" = "steelblue")) +
labs(title = "Genetic Risk Scores",
subtitle = "Dotted lines at ±1 and ±2 SD",
y = "PRS Value (SD units)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right") +
coord_flip()
cp=grid.arrange(p1, p2, p3, ncol = 3, heights = c(2, 2, 2))
# Combine plots with adjusted heights
#combined_plot <- p1 / p2 / p3 +
#plot_layout(heights = c(2, 2, 2))
return(cp)
}
prs_names=names(G)
individual_id=846
a=analyze_individual_trajectory(individual_id = individual_id,Y,G,theta,disease_names,prs_names,age_range = 30:80)
a
a$grobs
# Get first occurrence of each disease for ordering
disease_timeline <- data.frame(
disease = disease_names_list,
first_occurrence = apply(Y[individual_id,,], 1, function(x) min(which(x == 1)))
) %>%
mutate(
first_occurrence = ifelse(is.infinite(first_occurrence), Inf, first_occurrence + 30),
ever_occurs = first_occurrence < Inf
)
disease_names_list=disease_names
# Get first occurrence of each disease for ordering
disease_timeline <- data.frame(
disease = disease_names_list,
first_occurrence = apply(Y[individual_id,,], 1, function(x) min(which(x == 1)))
) %>%
mutate(
first_occurrence = ifelse(is.infinite(first_occurrence), Inf, first_occurrence + 30),
ever_occurs = first_occurrence < Inf
)
# Get diseases that occur for this person
person_disease <- disease_timeline %>%
filter(ever_occurs) %>%
arrange(first_occurrence) %>%
pull(disease)
disease_indices <- match(person_disease, disease_names_list)
# 1. Topic trajectories
topics_df <- as.data.frame(t(theta_pred[individual_id,,])) %>%
setNames(paste0("Topic ", 0:9)) %>%
mutate(Age = age_range) %>%
pivot_longer(-Age,
names_to = "Topic",
values_to = "Weight")
age_range=30:80
disease_timeline <- data.frame(
disease = disease_names_list,
first_occurrence = apply(Y[individual_id,,], 1, function(x) min(which(x == 1)))
) %>%
mutate(
first_occurrence = ifelse(is.infinite(first_occurrence), Inf, first_occurrence + 30),
ever_occurs = first_occurrence < Inf
)
# Get diseases that occur for this person
person_disease <- disease_timeline %>%
filter(ever_occurs) %>%
arrange(first_occurrence) %>%
pull(disease)
disease_indices <- match(person_disease, disease_names_list)
# 1. Topic trajectories
topics_df <- as.data.frame(t(theta_pred[individual_id,,])) %>%
setNames(paste0("Topic ", 0:9)) %>%
mutate(Age = age_range) %>%
pivot_longer(-Age,
names_to = "Topic",
values_to = "Weight")
p1 <- ggplot(topics_df, aes(x = Age, y = Weight, color = Topic)) +
geom_line(size = 1) +
labs(title = "Topic Trajectories",
y = "Topic Weight") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_d3()
# 2. Disease events - now ordered by first occurrence
diseases_df <- as.data.frame(t(Y[individual_id, disease_indices, ])) %>%
setNames(person_disease) %>%
mutate(Age = age_range) %>%
pivot_longer(-Age,
names_to = "Disease",
values_to = "Status") %>%
mutate(Disease = factor(Disease, levels = rev(person_disease)))  # Reverse order for bottom-up timeline
p2 <- ggplot(diseases_df, aes(x = Age, y = Disease, fill = as.factor(Status))) +
geom_tile() +
labs(title = "Disease Events",
y = "Disease Status",fill="Status") +
theme_minimal() +scale_fill_manual(values = c("0" = "white", "1" = "red"))+
theme(legend.position = "right")
# 3. Improved genetic risk scores plot
genetic_df <- data.frame(t(
G[individual_id,]
));
genetic_df$PRS=rownames(genetic_df)
colnames(genetic_df)=c("Value","PRS")
genetic_df=genetic_df%>%mutate(
Category = case_when(
abs(Value) >= 2 ~ "Very High",
abs(Value) >= 1 ~ "High",
abs(Value) >= 0.5 ~ "Moderate",
TRUE ~ "Low"
),
Direction = ifelse(Value >= 0, "Positive", "Negative"))
p3 <- ggplot(genetic_df, aes(x = reorder(PRS, abs(Value)), y = Value)) +
geom_col(aes(fill = Direction)) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = c(-2, -1, 1, 2), linetype = "dotted", alpha = 0.3) +
scale_fill_manual(values = c("Negative" = "darkred", "Positive" = "steelblue")) +
labs(title = "Genetic Risk Scores",
subtitle = "Dotted lines at ±1 and ±2 SD",
y = "PRS Value (SD units)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right") +
coord_flip()
cp=grid.arrange(p1, p2, p3, ncol = 3, heights = c(2, 2, 2))
# Combine plots with adjusted heights
#combined_plot <- p1 / p2 / p3 +
#plot_layout(heights = c(2, 2, 2))
gp
cp
p1
p2
p3
cp
grid.arrange(p1, p2, p3, ncol = 3, heights = c(2, 2, 2))
grid.arrange(p1, p2, p3, ncol = 3)
grid.arrange(p1, p2, p3, ncol = 3,widths=c(2,2,2))
grid.arrange(p1, p2, p3, ncol = 3,widths=c(2,4,2))
3
grid.arrange(p1, p2, p3, ncol = 3,widths=c(3,4,2))
grid.arrange(p1, p2, p3, ncol = 3,widths=c(2,2,2))
head(l)
head(l)
colnames(phi_logit)=disease_names
head(phi_logit)
dim(phi_logit)
phi_logit[rownames(phi_logit)%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),]
p=phi_logit[rownames(phi_logit)%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),,]
head(p)
matplot(p)
p
dim(p)
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+geom_line()
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+geom_curve()
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+geom_point()
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+geom_tile()
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+geom_line()
ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,color=as.factor(Signature)))+geom_line(group="Signature")
p2=ggplot(l[l$Disease%in%c("Coronary atherosclerosis","Myocardial infarction","Angina pectors","Atrial fibrillation and flutter","Congestive heart failure (CHF) NOS"),],aes(Time,value,fill=as.factor(Signature)))+
geom_area()+facet_wrap(~Disease)+scale_fill_futurama()+labs(x="Time (years from 30)",y="Probability",title="Signature probabilities over time",fill="Signature")
p2
matplot(p["Coronary atherosclerosis",,])
matplot(p["Coronary atherosclerosis",,])
matplot(p["Coronary atherosclerosis",,])
matplot(p["Coronary atherosclerosis",,])
matplot(p["Coronary atherosclerosis",,])
matplot(t(p["Coronary atherosclerosis",,]))
matplot(t(plogis(p["Coronary atherosclerosis",,])))
matplot(t(plogis(p["Coronary atherosclerosis",,])))
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
scale_color_futurama() +  # Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
# Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
scale_color_futurama() +  # Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
# Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
# Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2+theme_classic())
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time, value, color=as.factor(Signature))) +
geom_line(linewidth=1) +  # Use linewidth instead of size for newer ggplot2 versions
facet_wrap(~Disease) +
# Changed from scale_fill to scale_color
labs(x="Time (years from 30)",
y="Probability",
title="Signature probabilities over time",
color="Signature") +  # Changed from fill to color
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2+theme_classic()+)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time + 30, value, color=as.factor(Signature))) +  # Added +30 to Time
geom_line(linewidth=1) +
facet_wrap(~Disease) +
scale_color_brewer(palette="Set2") +  # Changed to a different color palette
scale_x_continuous(breaks = seq(30, 80, by = 10)) +  # Set x-axis breaks
labs(x="Age",
y="Probability",
title="Signature probabilities over time",
color="Signature") +
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time + 30, value, color=as.factor(Signature))) +  # Added +30 to Time
geom_line(linewidth=1) +
facet_wrap(~Disease) +scale_color_aaas() +  # Changed to a different color palette
scale_x_continuous(breaks = seq(30, 80, by = 10)) +  # Set x-axis breaks
labs(x="Age",
y="Probability",
title="Signature probabilities over time",
color="Signature") +
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
theta=aperm(apply(lambda,c(1,3),function(x){exp(x)/sum(exp(x))}),c(2,1,3))
G=readRDS("~/tensornoulli_ehr_new/data/prs.rds")
l=melt(theta)
colnames(l)=c("Individual","Signature","Time","value")
pop_av=apply(theta,c(2,3),mean)
head(pop_av)
dim(pop_av)
matplot(pop_av)
matplot(t(pop_av),type="l",y="Population Average Theta")
matplot(t(pop_av),type="l",ylab="Population Average Theta")
matplot(t(pop_av),type="l",ylab="Population Average Theta")
matplot(t(pop_av),type="l",ylab="Population Average Theta",lty=2)
matplot(t(pop_av),type="l",ylab="Population Average Theta",lty=1)
library(ggplot2)
library(viridis)  # for better color gradients
# First get your data as before
phi = model_data$phi
phi_logit = aperm(phi,c(2,1,3))
rownames(phi_logit) = disease_names
l = melt(plogis(phi_logit))
colnames(l) = c("Disease","Signature","Time","value")
# Calculate mean values for each disease within each signature
disease_means <- l %>%
group_by(Signature, Disease) %>%
summarize(mean_value = mean(value), .groups = "drop") %>%
group_by(Signature) %>%
arrange(Signature, desc(mean_value)) %>%
slice_head(n = 20)
# Create the filtered dataset
l_top <- l %>%
inner_join(disease_means, by = c("Signature", "Disease")) %>%
merge(groups, by.x = "Disease", by.y = "phenotype", all.x = TRUE)
# Create factor levels separately for each signature
l_top <- l_top %>%
group_split(Signature) %>%
map_dfr(~{
sig_means <- disease_means %>%
filter(Signature == first(.x$Signature)) %>%
arrange(desc(mean_value))
.x %>%
mutate(Disease = factor(Disease, levels = sig_means$Disease))
})
# Plot
p2 <- ggplot(l_top, aes(Time, Disease, fill = value)) +
geom_tile() +
facet_wrap(~ Signature, scales = "free_y", drop = TRUE) +
labs(x = "Time (years from 30)", y = NULL,
title = "Top diseases per signature over time",
fill = "Weight") +
scale_fill_viridis_c(option = "B", direction = -1) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
strip.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.ticks.y = element_blank(),
panel.spacing = unit(1, "lines")
)
print(p2)
ggsave(p2, filename = "signature_probabilities_disease_to2p20.pdf", width = 20, height = 6)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time + 30, value, color=as.factor(Signature))) +  # Added +30 to Time
geom_line(linewidth=1) +
facet_wrap(~Disease,scales = "free") +
scale_color_brewer(palette="Set2") +  # Changed to a different color palette
scale_x_continuous(breaks = seq(30, 80, by = 10)) +  # Set x-axis breaks
labs(x="Age",
y="Probability",
title="Signature probabilities over time",
color="Signature") +
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
p2 = ggplot(l[l$Disease%in%c("Coronary atherosclerosis",
"Myocardial infarction",
"Angina pectoris",
"Atrial fibrillation and flutter",
"Congestive heart failure (CHF) NOS"),],
aes(Time + 30, value, color=as.factor(Signature))) +  # Added +30 to Time
geom_line(linewidth=1) +
facet_wrap(~Disease,scales = "free") +
scale_color_aaas() +  # Changed to a different color palette
scale_x_continuous(breaks = seq(30, 80, by = 10)) +  # Set x-axis breaks
labs(x="Age",
y="Probability",
title="Signature probabilities over time",
color="Signature") +
theme_minimal() +
theme(
strip.text = element_text(size=12),
axis.title = element_text(size=12),
legend.title = element_text(size=12),
legend.text = element_text(size=10)
)
print(p2)
